default:
  interruptible: true
  image: node:20-alpine

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: $CI_COMMIT_TAG

stages:
  - build
  - test

# ----------------------- BUILD ---------------------------------- #


build_dev:
  stage: build
  script:
    - set -e
    - apk add --no-cache docker
    - echo "Verifying Docker CLI availability"
    - docker --version
    # login
    - echo "Logging into Azure"
    - docker login $REGISTRY_USERNAME.azurecr.io -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD

    - echo "Building and tagging bandit-frontend dev project"
    - docker build -t $REGISTRY_USERNAME.azurecr.io/bandit-frontend-dev:$CI_COMMIT_SHORT_SHA .
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd/dev'



#.build-setup: &build-setup
#  #  before_script:
#  #    - echo "Logging into Azure"
#  #    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
#  services:
#    - docker:27.3.1-dind
#  variables:
#    DOCKER_HOST: "tcp://docker:2375"
#    DOCKER_TLS_CERTDIR: ""
#
#
#build_dev:
#  <<: *build-setup
#  stage: build
#  script:
#    - set -e
#    - apk add --no-cache docker
#    - echo "Verifying Docker CLI availability"
#    - docker --version
#    - echo "Building and tagging bandit-frontend dev project"
#    - docker build -t $REGISTRY_USERNAME.azurecr.io/bandit-frontend-dev:$CI_COMMIT_SHORT_SHA .
#  #    - echo "Pushing Docker image to Azure Container Registry"
#  #    - docker push $REGISTRY_USERNAME.azurecr.io/bandit-frontend-dev:$CI_COMMIT_SHORT_SHA
#  rules:
#    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
#    - if: $CI_COMMIT_BRANCH == 'ci-cd/dev'


#build_prod:
#  <<: *docker-setup
#  stage: build
#  script:
#    - echo "Building bandit-frontend prod project"
#    - docker build -t bandit-frontend:prod .
#  rules:
#    - if: $CI_COMMIT_TAG
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#    - if: $CI_COMMIT_BRANCH == 'ci-cd/prod'



# ----------------------- TEST ---------------------------------- #
eslint:
  stage: test
  script:
    - echo "Running ESLint"
    - npm ci
    - npm run lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd/dev'
  allow_failure: false


sast:
  stage: test
  script:
    - echo "Running SAST with dependency-check or another tool"
    - npx snyk code --severity-threshold=medium
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd/dev'
  allow_failure: false



# ----------------------- DEPLOY ---------------------------------- #

#deploy_dev:
#  image: mcr.microsoft.com/azure-cli
#  stage: deploy
#  when: on_success
#  needs:
#    - build_dev
#  before_script:
#    - echo "Logging into Azure"
#    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
#    - az extension add --name containerapp --upgrade
#  script:
#    - echo "Deploying Docker image to Azure Container Apps"
#    - az containerapp up --name $CONTAINER_NAME \
#      --resource-group $RESOURCE_GROUP \
#      --image "$REG_USERNAME.azurecr.io/$IMAGE_NAME:$CI_COMMIT_SHORT_SHA" \
#      --target-port $PORT \
#      --ingress external \
#      --cpu 1 --memory 2Gi \
#      --min-replicas 0 --max-replicas 1
#    - echo "Deployment complete"
#  environment:
#    name: frontend-dev
#    deployment_tier: testing
#    action: start
#    auto_stop_in: 1 hours
#    on_stop: destroy_dev
#  rules:
#    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
#    - if: $CI_COMMIT_BRANCH == 'ci-cd/dev'


# ----------------------- DESTROY ---------------------------------- #
#destroy:
#  stage: destroy
#  script:
#    - echo "Cleaning up resources in development..."
#  rules:
#    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
#    - if: $CI_COMMIT_BRANCH == 'ci-cd'
