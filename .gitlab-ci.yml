default:
  interruptible: true
  image: node:20-alpine

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: $CI_COMMIT_TAG

stages:
  - build
  - test
  - deploy

# ----------------------- BUILD ---------------------------------- #

#.build-dev-setup: &build-dev-setup
#  before_script:
#    - set -e
#    - apk add --no-cache docker
#    - echo "Logging into Azure"
#    - docker login $REGISTRY_USERNAME.azurecr.io -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD
#  services:
#    - docker:27.3.1-dind
#  variables:
#    DOCKER_HOST: "tcp://docker:2375"
#    DOCKER_TLS_CERTDIR: ""

.build-prod-setup: &build-prod-setup
  before_script:
    - set -e
    - apk add --no-cache docker
    - echo "Logging into Azure"
    - docker login $PROD_REGISTRY_USERNAME.azurecr.io -u $PROD_REGISTRY_USERNAME -p $PROD_REGISTRY_PASSWORD
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""

#build_dev:
#  <<: *build-dev-setup
#  stage: build
#  script:
#    - echo "Building and tagging bandit-frontend dev project"
#    - docker build
#      --build-arg VITE_KC_URL=$KC_URL
#      --build-arg VITE_KC_REALM=$KC_REALM
#      --build-arg VITE_KC_CLIENT_ID=$KC_CLIENT_ID
#      --build-arg VITE_STRIPE_PUBLIC_KEY=$STRIPE_PUBLIC_KEY
#      --build-arg VITE_CHATBOT_URL=$DEV_CHATBOT_URL
#      --build-arg VITE_GAME_REGISTRY_URL=$DEV_GAME_REGISTRY_URL
#      --build-arg VITE_GAMEPLAY_URL=$DEV_GAMEPLAY_URL
#      --build-arg VITE_PLAYER_URL=$DEV_PLAYER_URL
#      --build-arg VITE_STATISTICS_URL=$DEV_STATISTICS_URL
#      --build-arg VITE_STOREFRONT_URL=$DEV_STOREFRONT_URL
#      -t $REGISTRY_USERNAME.azurecr.io/bandit-frontend-dev:$CI_COMMIT_SHORT_SHA
#      .
#    - echo "Publishing frontend dev image to Azure"
#    - docker push $REGISTRY_USERNAME.azurecr.io/bandit-frontend-dev:$CI_COMMIT_SHORT_SHA
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#    - if: '$CI_COMMIT_BRANCH == "ci-cd/dev"'

build_prod:
  <<: *build-prod-setup
  stage: build
  script:
    - echo "Building and tagging bandit-frontend prod project"
    - docker build
      --build-arg VITE_KC_URL=$KC_URL
      --build-arg VITE_KC_REALM=$KC_REALM
      --build-arg VITE_KC_CLIENT_ID=$KC_CLIENT_ID
      --build-arg VITE_STRIPE_PUBLIC_KEY=$STRIPE_PUBLIC_KEY
      --build-arg VITE_CHATBOT_URL=$PROD_CHATBOT_URL
      --build-arg VITE_GAME_REGISTRY_URL=$PROD_GAME_REGISTRY_URL
      --build-arg VITE_GAMEPLAY_URL=$PROD_GAMEPLAY_URL
      --build-arg VITE_PLAYER_URL=$PROD_PLAYER_URL
      --build-arg VITE_STATISTICS_URL=$PROD_STATISTICS_URL
      --build-arg VITE_STOREFRONT_URL=$PROD_STOREFRONT_URL
      -t $PROD_REGISTRY_USERNAME.azurecr.io/bandit-frontend-prod:$CI_COMMIT_SHORT_SHA
      .
    - echo "Publishing frontend prod image to Azure"
    - docker push $PROD_REGISTRY_USERNAME.azurecr.io/bandit-frontend-prod:$CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == 'ci-cd/dev'
#    - if: '$CI_COMMIT_BRANCH == "ci-cd/prod"'



# ----------------------- TEST ---------------------------------- #
eslint:
  stage: test
  script:
    - echo "Running ESLint"
    - npm ci
    - npm run lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd/dev'
  allow_failure: false


sast:
  stage: test
  script:
    - echo "Running SAST with dependency-check or another tool"
    - npx snyk code --severity-threshold=medium
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd/dev'
  allow_failure: false



# ----------------------- DEPLOY ---------------------------------- #

#deploy_webapp_dev:
#  image: mcr.microsoft.com/azure-cli
#  stage: deploy
#  when: on_success
#  needs:
#    - build_dev
#  before_script:
#    - echo "Logging into Azure "
#    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
#    - az account set --subscription $SUBS_ID_DEV
#    - sleep 20
#  script:
#    - declare -A value_map=(
#      ["NAME"]="bandit-games-dev"
#      ["RESOURCE_GROUP"]="rg_bandit_games_dev"
#      ["PLAN"]="ASP_frontend_dev"
#      ["SUBSCRIPTION"]="$SUBS_ID_DEV"
#      ["CONTAINER_IMAGE"]="$REGISTRY_USERNAME.azurecr.io/bandit-frontend-dev:$CI_COMMIT_SHORT_SHA"
#      ["LOCATION"]="northeurope"
#      ["SKU"]="B1"
#      )
#    - serialized_map=""
#    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
#    - chmod +x cicd/deploy-webapp.sh
#    - cicd/deploy-webapp.sh "$serialized_map"
#  environment:
#    name: webapp-dev
#    deployment_tier: production
#    action: start
#    auto_stop_in: 1 hours
#  rules:
#    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
#    - if: $CI_COMMIT_BRANCH == 'ci-cd/dev'


#deploy_webapp_prod:
#  image: mcr.microsoft.com/azure-cli
#  stage: deploy
#  when: on_success
#  needs:
#    - build_prod
#  before_script:
#    - echo "Logging into Azure"
#    - az login --service-principal -u $PROD_AZURE_APP_ID -p $PROD_AZURE_PASSWORD --tenant $PROD_AZURE_TENANT
#    - az account set --subscription $SUBS_ID_PROD
#  script:
#    - declare -A value_map=(
#      ["NAME"]="bandit-games"
#      ["RESOURCE_GROUP"]="rg_bandit_games_prod"
#      ["PLAN"]="ASP_frontend_prod"
#      ["SUBSCRIPTION"]="$SUBS_ID_PROD"
#      ["CONTAINER_IMAGE"]="$PROD_REGISTRY_USERNAME.azurecr.io/bandit-frontend-prod:$CI_COMMIT_SHORT_SHA"
#      ["LOCATION"]="northeurope"
#      ["SKU"]="B1"
#      )
#    - serialized_map=""
#    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
#    - chmod +x cicd/deploy-webapp.sh
#    - cicd/deploy-webapp.sh "$serialized_map"
#  environment:
#    name: webapp-prod
#    deployment_tier: production
#    action: start
#    auto_stop_in: 1 hours
#  rules:
#    - if: $CI_COMMIT_TAG
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#    - if: $CI_COMMIT_BRANCH == 'ci-cd/dev'
